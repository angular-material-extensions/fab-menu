{"hash":"1ac4e75358924aec31a1c937ff4d1d8245e76371","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate, query, stagger, keyframes } from '@angular/animations';\nimport * as i1 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i3 from '@angular/flex-layout/flex';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/flex-layout/extended';\nimport * as i6 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nconst speedDialFabAnimations = [\n    trigger('fabToggler', [\n        state('false', style({\n            transform: 'rotate(0deg)'\n        })),\n        state('true', style({\n            transform: 'rotate(225deg)'\n        })),\n        transition('* <=> *', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n    trigger('fabsStagger', [\n        transition('* => *', [\n            query(':enter', style({ opacity: 0 }), { optional: true }),\n            query(':enter', stagger('40ms', [\n                animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                    style({ opacity: 0, transform: 'translateY(10px)' }),\n                    style({ opacity: 1, transform: 'translateY(0)' }),\n                ]))\n            ]), { optional: true }),\n            query(':leave', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                style({ opacity: 1 }),\n                style({ opacity: 0 }),\n            ])), { optional: true })\n        ])\n    ])\n];\n\nclass MatFabMenuComponent {\n    constructor() {\n        this.icon = 'add';\n        this.direction = 'top';\n        this.color = 'accent';\n        this.closeAfterSelection = true;\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onFabMenuItemSelected = new EventEmitter();\n    }\n    ngOnInit() {\n        this.adjustLayout();\n    }\n    ngOnChanges(changes) {\n        if (changes.direction && !changes.direction.firstChange) {\n            this.direction = changes.direction.currentValue;\n            this.adjustLayout();\n        }\n        if (changes.color && !changes.color.firstChange) {\n            this.color = changes.color.currentValue;\n        }\n        if (changes.fabButtons && !changes.fabButtons.firstChange) {\n            this.fabButtons = changes.fabButtons.currentValue;\n        }\n    }\n    adjustLayout() {\n        switch (this.direction) {\n            case 'top':\n                this.layout = 'column-reverse';\n                this.layout2 = 'column-reverse';\n                break;\n            case 'bottom':\n                this.layout = 'column';\n                this.layout2 = 'column';\n                break;\n            case 'left':\n                this.layout = 'row-reverse';\n                this.layout2 = 'row-reverse';\n                break;\n            case 'right':\n                this.layout = 'row';\n                this.layout2 = 'row';\n                break;\n        }\n    }\n    toggle() {\n        this.isActive = !this.isActive;\n    }\n    selectFabMenu(fab) {\n        this.onFabMenuItemSelected.emit(fab.id);\n        if (this.closeAfterSelection) {\n            this.isActive = false;\n        }\n    }\n}\nMatFabMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatFabMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: MatFabMenuComponent, selector: \"mat-fab-menu\", inputs: { fabButtons: \"fabButtons\", icon: \"icon\", direction: \"direction\", color: \"color\", isActive: \"isActive\", disabled: \"disabled\", closeAfterSelection: \"closeAfterSelection\" }, outputs: { onFabMenuItemSelected: \"onFabMenuItemSelected\" }, usesOnChanges: true, ngImport: i0, template: \"<div [fxLayout]=\\\"layout\\\" class=\\\"container\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n  <div fxLayoutAlign=\\\"center\\\">\\n    <button (click)=\\\"isActive = !isActive\\\"\\n            [color]=\\\"color\\\" [disabled]=\\\"disabled\\\"\\n            type=\\\"button\\\"\\n            [ngClass]=\\\"{\\n    'mat-fab' : !isActive,\\n    'mat-mini-fab' : isActive\\n  }\\\"\\n            mat-fab>\\n      <mat-icon [@fabToggler]=\\\"{value: isActive}\\\">{{icon}}</mat-icon> <!-- Animation here -->\\n    </button>\\n  </div>\\n  <div *ngIf=\\\"isActive\\\" [@fabsStagger]=\\\"fabButtons.length\\\"\\n       [fxLayout]=\\\"layout2\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n    <button (click)=\\\"selectFabMenu(fab)\\\"\\n            *ngFor=\\\"let fab of fabButtons\\\"\\n            [color]=\\\"fab?.color\\\"\\n            [matTooltip]=\\\"fab?.tooltip\\\"\\n            [matTooltipPosition]=\\\"fab?.tooltipPosition\\\"\\n            [ngClass]=\\\"{'fullSVG' : fab?.imgUrl}\\\"\\n            type=\\\"button\\\"\\n            mat-fab>\\n      <mat-icon *ngIf=\\\"fab?.icon\\\" [color]=\\\"fab?.iconColor\\\">{{fab?.icon}}</mat-icon>\\n      <img *ngIf=\\\"fab?.imgUrl\\\" [src]=\\\"fab?.imgUrl\\\" alt=\\\"icon\\\">\\n    </button>\\n  </div>\\n</div>\\n\", styles: [\":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}\\n\"], components: [{ type: i1.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i3.DefaultLayoutAlignDirective, selector: \"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\", inputs: [\"fxLayoutAlign\", \"fxLayoutAlign.xs\", \"fxLayoutAlign.sm\", \"fxLayoutAlign.md\", \"fxLayoutAlign.lg\", \"fxLayoutAlign.xl\", \"fxLayoutAlign.lt-sm\", \"fxLayoutAlign.lt-md\", \"fxLayoutAlign.lt-lg\", \"fxLayoutAlign.lt-xl\", \"fxLayoutAlign.gt-xs\", \"fxLayoutAlign.gt-sm\", \"fxLayoutAlign.gt-md\", \"fxLayoutAlign.gt-lg\"] }, { type: i3.DefaultLayoutGapDirective, selector: \"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\", inputs: [\"fxLayoutGap\", \"fxLayoutGap.xs\", \"fxLayoutGap.sm\", \"fxLayoutGap.md\", \"fxLayoutGap.lg\", \"fxLayoutGap.xl\", \"fxLayoutGap.lt-sm\", \"fxLayoutGap.lt-md\", \"fxLayoutGap.lt-lg\", \"fxLayoutGap.lt-xl\", \"fxLayoutGap.gt-xs\", \"fxLayoutGap.gt-sm\", \"fxLayoutGap.gt-md\", \"fxLayoutGap.gt-lg\"] }, { type: i3.DefaultLayoutDirective, selector: \"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]\", inputs: [\"fxLayout\", \"fxLayout.xs\", \"fxLayout.sm\", \"fxLayout.md\", \"fxLayout.lg\", \"fxLayout.xl\", \"fxLayout.lt-sm\", \"fxLayout.lt-md\", \"fxLayout.lt-lg\", \"fxLayout.lt-xl\", \"fxLayout.gt-xs\", \"fxLayout.gt-sm\", \"fxLayout.gt-md\", \"fxLayout.gt-lg\"] }, { type: i4.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i5.DefaultClassDirective, selector: \"  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\", inputs: [\"ngClass\", \"ngClass.xs\", \"ngClass.sm\", \"ngClass.md\", \"ngClass.lg\", \"ngClass.xl\", \"ngClass.lt-sm\", \"ngClass.lt-md\", \"ngClass.lt-lg\", \"ngClass.lt-xl\", \"ngClass.gt-xs\", \"ngClass.gt-sm\", \"ngClass.gt-md\", \"ngClass.gt-lg\"] }, { type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i6.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], animations: speedDialFabAnimations });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-fab-menu', animations: speedDialFabAnimations, template: \"<div [fxLayout]=\\\"layout\\\" class=\\\"container\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n  <div fxLayoutAlign=\\\"center\\\">\\n    <button (click)=\\\"isActive = !isActive\\\"\\n            [color]=\\\"color\\\" [disabled]=\\\"disabled\\\"\\n            type=\\\"button\\\"\\n            [ngClass]=\\\"{\\n    'mat-fab' : !isActive,\\n    'mat-mini-fab' : isActive\\n  }\\\"\\n            mat-fab>\\n      <mat-icon [@fabToggler]=\\\"{value: isActive}\\\">{{icon}}</mat-icon> <!-- Animation here -->\\n    </button>\\n  </div>\\n  <div *ngIf=\\\"isActive\\\" [@fabsStagger]=\\\"fabButtons.length\\\"\\n       [fxLayout]=\\\"layout2\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n    <button (click)=\\\"selectFabMenu(fab)\\\"\\n            *ngFor=\\\"let fab of fabButtons\\\"\\n            [color]=\\\"fab?.color\\\"\\n            [matTooltip]=\\\"fab?.tooltip\\\"\\n            [matTooltipPosition]=\\\"fab?.tooltipPosition\\\"\\n            [ngClass]=\\\"{'fullSVG' : fab?.imgUrl}\\\"\\n            type=\\\"button\\\"\\n            mat-fab>\\n      <mat-icon *ngIf=\\\"fab?.icon\\\" [color]=\\\"fab?.iconColor\\\">{{fab?.icon}}</mat-icon>\\n      <img *ngIf=\\\"fab?.imgUrl\\\" [src]=\\\"fab?.imgUrl\\\" alt=\\\"icon\\\">\\n    </button>\\n  </div>\\n</div>\\n\", styles: [\":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { fabButtons: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], closeAfterSelection: [{\n                type: Input\n            }], onFabMenuItemSelected: [{\n                type: Output\n            }] } });\n\nclass MatFabMenuModule {\n}\nMatFabMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatFabMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, declarations: [MatFabMenuComponent], imports: [CommonModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        FlexLayoutModule], exports: [MatFabMenuComponent] });\nMatFabMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, imports: [[\n            CommonModule,\n            MatButtonModule,\n            MatIconModule,\n            MatTooltipModule,\n            FlexLayoutModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatFabMenuComponent],\n                    imports: [\n                        CommonModule,\n                        MatButtonModule,\n                        MatIconModule,\n                        MatTooltipModule,\n                        FlexLayoutModule\n                    ],\n                    exports: [MatFabMenuComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of fab-menu\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatFabMenuComponent, MatFabMenuModule };\n//# sourceMappingURL=angular-material-extensions-fab-menu.mjs.map\n","map":{"version":3,"file":"angular-material-extensions-fab-menu.mjs","sources":["../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.animations.ts","../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.component.ts","../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.component.html","../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.module.ts","../../../../projects/angular-material-extensions/fab-menu/src/public-api.ts","../../../../projects/angular-material-extensions/fab-menu/src/angular-material-extensions-fab-menu.ts"],"sourcesContent":["import {animate, keyframes, query, stagger, state, style, transition, trigger} from '@angular/animations';\n\nexport const speedDialFabAnimations = [\n  trigger('fabToggler', [\n    state('false', style({\n      transform: 'rotate(0deg)'\n    })),\n    state('true', style({\n      transform: 'rotate(225deg)'\n    })),\n    transition('* <=> *', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n  ]),\n  trigger('fabsStagger', [\n    transition('* => *', [\n\n      query(':enter', style({opacity: 0}), {optional: true}),\n\n      query(':enter', stagger('40ms',\n        [\n          animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n            keyframes(\n              [\n                style({opacity: 0, transform: 'translateY(10px)'}),\n                style({opacity: 1, transform: 'translateY(0)'}),\n              ]\n            )\n          )\n        ]\n      ), {optional: true}),\n\n      query(':leave',\n        animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n          keyframes([\n            style({opacity: 1}),\n            style({opacity: 0}),\n          ])\n        ), {optional: true}\n      )\n\n    ])\n  ])\n];\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {speedDialFabAnimations} from './mat-fab-menu.animations';\nimport { ThemePalette } from '@angular/material/core';\nimport { TooltipPosition } from '@angular/material/tooltip';\n\nexport interface MatFabMenu {\n  id: string | number;\n  icon?: string; // please use either icon or imgUrl\n  iconColor?: ThemePalette;\n  imgUrl?: string; // please use either icon or imgUrl\n  tooltip?: string;\n  tooltipPosition?: TooltipPosition;\n  color?: ThemePalette;\n}\n\nexport type MatFabMenuDirection = 'top' | 'bottom' | 'left' | 'right';\n\n@Component({\n  selector: 'mat-fab-menu',\n  templateUrl: 'mat-fab-menu.component.html',\n  styleUrls: ['mat-fab-menu.component.scss'],\n  animations: speedDialFabAnimations\n})\nexport class MatFabMenuComponent implements OnInit, OnChanges {\n\n  @Input()\n  fabButtons: MatFabMenu[];\n\n  @Input()\n  icon = 'add';\n\n  @Input()\n  direction: MatFabMenuDirection = 'top';\n\n  @Input()\n  color: ThemePalette = 'accent';\n\n  @Input()\n  isActive: boolean;\n\n  @Input()\n  disabled: boolean;\n\n  @Input()\n  closeAfterSelection = true;\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output()\n  onFabMenuItemSelected: EventEmitter<string | number> = new EventEmitter<string | number>();\n\n  layout: any;\n  layout2: any;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.adjustLayout();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.direction && !changes.direction.firstChange) {\n      this.direction = changes.direction.currentValue;\n      this.adjustLayout();\n    }\n\n    if (changes.color && !changes.color.firstChange) {\n      this.color = changes.color.currentValue;\n    }\n\n    if (changes.fabButtons && !changes.fabButtons.firstChange) {\n      this.fabButtons = changes.fabButtons.currentValue;\n    }\n  }\n\n  adjustLayout() {\n    switch (this.direction) {\n      case 'top':\n        this.layout = 'column-reverse';\n        this.layout2 = 'column-reverse';\n        break;\n\n      case 'bottom':\n        this.layout = 'column';\n        this.layout2 = 'column';\n        break;\n\n      case 'left':\n        this.layout = 'row-reverse';\n        this.layout2 = 'row-reverse';\n        break;\n\n      case 'right':\n        this.layout = 'row';\n        this.layout2 = 'row';\n        break;\n    }\n  }\n\n  toggle() {\n    this.isActive = !this.isActive;\n  }\n\n  selectFabMenu(fab: MatFabMenu) {\n    this.onFabMenuItemSelected.emit(fab.id);\n    if (this.closeAfterSelection) {\n      this.isActive = false;\n    }\n  }\n}\n","<div [fxLayout]=\"layout\" class=\"container\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n  <div fxLayoutAlign=\"center\">\n    <button (click)=\"isActive = !isActive\"\n            [color]=\"color\" [disabled]=\"disabled\"\n            type=\"button\"\n            [ngClass]=\"{\n    'mat-fab' : !isActive,\n    'mat-mini-fab' : isActive\n  }\"\n            mat-fab>\n      <mat-icon [@fabToggler]=\"{value: isActive}\">{{icon}}</mat-icon> <!-- Animation here -->\n    </button>\n  </div>\n  <div *ngIf=\"isActive\" [@fabsStagger]=\"fabButtons.length\"\n       [fxLayout]=\"layout2\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <button (click)=\"selectFabMenu(fab)\"\n            *ngFor=\"let fab of fabButtons\"\n            [color]=\"fab?.color\"\n            [matTooltip]=\"fab?.tooltip\"\n            [matTooltipPosition]=\"fab?.tooltipPosition\"\n            [ngClass]=\"{'fullSVG' : fab?.imgUrl}\"\n            type=\"button\"\n            mat-fab>\n      <mat-icon *ngIf=\"fab?.icon\" [color]=\"fab?.iconColor\">{{fab?.icon}}</mat-icon>\n      <img *ngIf=\"fab?.imgUrl\" [src]=\"fab?.imgUrl\" alt=\"icon\">\n    </button>\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {MatFabMenuComponent} from './mat-fab-menu.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {CommonModule} from '@angular/common';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {FlexLayoutModule} from '@angular/flex-layout';\n\n@NgModule({\n  declarations: [MatFabMenuComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTooltipModule,\n    FlexLayoutModule\n  ],\n  exports: [MatFabMenuComponent]\n})\nexport class MatFabMenuModule {\n}\n","/*\n * Public API Surface of fab-menu\n */\n\nexport * from './lib/mat-fab-menu.component';\nexport * from './lib/mat-fab-menu.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate, query, stagger, keyframes } from '@angular/animations';\nimport * as i1 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i3 from '@angular/flex-layout/flex';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/flex-layout/extended';\nimport * as i6 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nconst speedDialFabAnimations = [\n    trigger('fabToggler', [\n        state('false', style({\n            transform: 'rotate(0deg)'\n        })),\n        state('true', style({\n            transform: 'rotate(225deg)'\n        })),\n        transition('* <=> *', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n    trigger('fabsStagger', [\n        transition('* => *', [\n            query(':enter', style({ opacity: 0 }), { optional: true }),\n            query(':enter', stagger('40ms', [\n                animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                    style({ opacity: 0, transform: 'translateY(10px)' }),\n                    style({ opacity: 1, transform: 'translateY(0)' }),\n                ]))\n            ]), { optional: true }),\n            query(':leave', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                style({ opacity: 1 }),\n                style({ opacity: 0 }),\n            ])), { optional: true })\n        ])\n    ])\n];\n\nclass MatFabMenuComponent {\n    constructor() {\n        this.icon = 'add';\n        this.direction = 'top';\n        this.color = 'accent';\n        this.closeAfterSelection = true;\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onFabMenuItemSelected = new EventEmitter();\n    }\n    ngOnInit() {\n        this.adjustLayout();\n    }\n    ngOnChanges(changes) {\n        if (changes.direction && !changes.direction.firstChange) {\n            this.direction = changes.direction.currentValue;\n            this.adjustLayout();\n        }\n        if (changes.color && !changes.color.firstChange) {\n            this.color = changes.color.currentValue;\n        }\n        if (changes.fabButtons && !changes.fabButtons.firstChange) {\n            this.fabButtons = changes.fabButtons.currentValue;\n        }\n    }\n    adjustLayout() {\n        switch (this.direction) {\n            case 'top':\n                this.layout = 'column-reverse';\n                this.layout2 = 'column-reverse';\n                break;\n            case 'bottom':\n                this.layout = 'column';\n                this.layout2 = 'column';\n                break;\n            case 'left':\n                this.layout = 'row-reverse';\n                this.layout2 = 'row-reverse';\n                break;\n            case 'right':\n                this.layout = 'row';\n                this.layout2 = 'row';\n                break;\n        }\n    }\n    toggle() {\n        this.isActive = !this.isActive;\n    }\n    selectFabMenu(fab) {\n        this.onFabMenuItemSelected.emit(fab.id);\n        if (this.closeAfterSelection) {\n            this.isActive = false;\n        }\n    }\n}\nMatFabMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatFabMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: MatFabMenuComponent, selector: \"mat-fab-menu\", inputs: { fabButtons: \"fabButtons\", icon: \"icon\", direction: \"direction\", color: \"color\", isActive: \"isActive\", disabled: \"disabled\", closeAfterSelection: \"closeAfterSelection\" }, outputs: { onFabMenuItemSelected: \"onFabMenuItemSelected\" }, usesOnChanges: true, ngImport: i0, template: \"<div [fxLayout]=\\\"layout\\\" class=\\\"container\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n  <div fxLayoutAlign=\\\"center\\\">\\n    <button (click)=\\\"isActive = !isActive\\\"\\n            [color]=\\\"color\\\" [disabled]=\\\"disabled\\\"\\n            type=\\\"button\\\"\\n            [ngClass]=\\\"{\\n    'mat-fab' : !isActive,\\n    'mat-mini-fab' : isActive\\n  }\\\"\\n            mat-fab>\\n      <mat-icon [@fabToggler]=\\\"{value: isActive}\\\">{{icon}}</mat-icon> <!-- Animation here -->\\n    </button>\\n  </div>\\n  <div *ngIf=\\\"isActive\\\" [@fabsStagger]=\\\"fabButtons.length\\\"\\n       [fxLayout]=\\\"layout2\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n    <button (click)=\\\"selectFabMenu(fab)\\\"\\n            *ngFor=\\\"let fab of fabButtons\\\"\\n            [color]=\\\"fab?.color\\\"\\n            [matTooltip]=\\\"fab?.tooltip\\\"\\n            [matTooltipPosition]=\\\"fab?.tooltipPosition\\\"\\n            [ngClass]=\\\"{'fullSVG' : fab?.imgUrl}\\\"\\n            type=\\\"button\\\"\\n            mat-fab>\\n      <mat-icon *ngIf=\\\"fab?.icon\\\" [color]=\\\"fab?.iconColor\\\">{{fab?.icon}}</mat-icon>\\n      <img *ngIf=\\\"fab?.imgUrl\\\" [src]=\\\"fab?.imgUrl\\\" alt=\\\"icon\\\">\\n    </button>\\n  </div>\\n</div>\\n\", styles: [\":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}\\n\"], components: [{ type: i1.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i3.DefaultLayoutAlignDirective, selector: \"  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\", inputs: [\"fxLayoutAlign\", \"fxLayoutAlign.xs\", \"fxLayoutAlign.sm\", \"fxLayoutAlign.md\", \"fxLayoutAlign.lg\", \"fxLayoutAlign.xl\", \"fxLayoutAlign.lt-sm\", \"fxLayoutAlign.lt-md\", \"fxLayoutAlign.lt-lg\", \"fxLayoutAlign.lt-xl\", \"fxLayoutAlign.gt-xs\", \"fxLayoutAlign.gt-sm\", \"fxLayoutAlign.gt-md\", \"fxLayoutAlign.gt-lg\"] }, { type: i3.DefaultLayoutGapDirective, selector: \"  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\", inputs: [\"fxLayoutGap\", \"fxLayoutGap.xs\", \"fxLayoutGap.sm\", \"fxLayoutGap.md\", \"fxLayoutGap.lg\", \"fxLayoutGap.xl\", \"fxLayoutGap.lt-sm\", \"fxLayoutGap.lt-md\", \"fxLayoutGap.lt-lg\", \"fxLayoutGap.lt-xl\", \"fxLayoutGap.gt-xs\", \"fxLayoutGap.gt-sm\", \"fxLayoutGap.gt-md\", \"fxLayoutGap.gt-lg\"] }, { type: i3.DefaultLayoutDirective, selector: \"  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]\", inputs: [\"fxLayout\", \"fxLayout.xs\", \"fxLayout.sm\", \"fxLayout.md\", \"fxLayout.lg\", \"fxLayout.xl\", \"fxLayout.lt-sm\", \"fxLayout.lt-md\", \"fxLayout.lt-lg\", \"fxLayout.lt-xl\", \"fxLayout.gt-xs\", \"fxLayout.gt-sm\", \"fxLayout.gt-md\", \"fxLayout.gt-lg\"] }, { type: i4.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i5.DefaultClassDirective, selector: \"  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\", inputs: [\"ngClass\", \"ngClass.xs\", \"ngClass.sm\", \"ngClass.md\", \"ngClass.lg\", \"ngClass.xl\", \"ngClass.lt-sm\", \"ngClass.lt-md\", \"ngClass.lt-lg\", \"ngClass.lt-xl\", \"ngClass.gt-xs\", \"ngClass.gt-sm\", \"ngClass.gt-md\", \"ngClass.gt-lg\"] }, { type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i6.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], animations: speedDialFabAnimations });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-fab-menu', animations: speedDialFabAnimations, template: \"<div [fxLayout]=\\\"layout\\\" class=\\\"container\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n  <div fxLayoutAlign=\\\"center\\\">\\n    <button (click)=\\\"isActive = !isActive\\\"\\n            [color]=\\\"color\\\" [disabled]=\\\"disabled\\\"\\n            type=\\\"button\\\"\\n            [ngClass]=\\\"{\\n    'mat-fab' : !isActive,\\n    'mat-mini-fab' : isActive\\n  }\\\"\\n            mat-fab>\\n      <mat-icon [@fabToggler]=\\\"{value: isActive}\\\">{{icon}}</mat-icon> <!-- Animation here -->\\n    </button>\\n  </div>\\n  <div *ngIf=\\\"isActive\\\" [@fabsStagger]=\\\"fabButtons.length\\\"\\n       [fxLayout]=\\\"layout2\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"16px\\\">\\n    <button (click)=\\\"selectFabMenu(fab)\\\"\\n            *ngFor=\\\"let fab of fabButtons\\\"\\n            [color]=\\\"fab?.color\\\"\\n            [matTooltip]=\\\"fab?.tooltip\\\"\\n            [matTooltipPosition]=\\\"fab?.tooltipPosition\\\"\\n            [ngClass]=\\\"{'fullSVG' : fab?.imgUrl}\\\"\\n            type=\\\"button\\\"\\n            mat-fab>\\n      <mat-icon *ngIf=\\\"fab?.icon\\\" [color]=\\\"fab?.iconColor\\\">{{fab?.icon}}</mat-icon>\\n      <img *ngIf=\\\"fab?.imgUrl\\\" [src]=\\\"fab?.imgUrl\\\" alt=\\\"icon\\\">\\n    </button>\\n  </div>\\n</div>\\n\", styles: [\":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { fabButtons: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], closeAfterSelection: [{\n                type: Input\n            }], onFabMenuItemSelected: [{\n                type: Output\n            }] } });\n\nclass MatFabMenuModule {\n}\nMatFabMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatFabMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, declarations: [MatFabMenuComponent], imports: [CommonModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        FlexLayoutModule], exports: [MatFabMenuComponent] });\nMatFabMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, imports: [[\n            CommonModule,\n            MatButtonModule,\n            MatIconModule,\n            MatTooltipModule,\n            FlexLayoutModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: MatFabMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatFabMenuComponent],\n                    imports: [\n                        CommonModule,\n                        MatButtonModule,\n                        MatIconModule,\n                        MatTooltipModule,\n                        FlexLayoutModule\n                    ],\n                    exports: [MatFabMenuComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of fab-menu\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatFabMenuComponent, MatFabMenuModule };\n//# sourceMappingURL=angular-material-extensions-fab-menu.mjs.map\n","map":{"version":3,"file":"angular-material-extensions-fab-menu.mjs","sources":["../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.animations.ts","../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.component.ts","../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.component.html","../../../../projects/angular-material-extensions/fab-menu/src/lib/mat-fab-menu.module.ts","../../../../projects/angular-material-extensions/fab-menu/src/public-api.ts","../../../../projects/angular-material-extensions/fab-menu/src/angular-material-extensions-fab-menu.ts"],"sourcesContent":["import {animate, keyframes, query, stagger, state, style, transition, trigger} from '@angular/animations';\n\nexport const speedDialFabAnimations = [\n  trigger('fabToggler', [\n    state('false', style({\n      transform: 'rotate(0deg)'\n    })),\n    state('true', style({\n      transform: 'rotate(225deg)'\n    })),\n    transition('* <=> *', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n  ]),\n  trigger('fabsStagger', [\n    transition('* => *', [\n\n      query(':enter', style({opacity: 0}), {optional: true}),\n\n      query(':enter', stagger('40ms',\n        [\n          animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n            keyframes(\n              [\n                style({opacity: 0, transform: 'translateY(10px)'}),\n                style({opacity: 1, transform: 'translateY(0)'}),\n              ]\n            )\n          )\n        ]\n      ), {optional: true}),\n\n      query(':leave',\n        animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n          keyframes([\n            style({opacity: 1}),\n            style({opacity: 0}),\n          ])\n        ), {optional: true}\n      )\n\n    ])\n  ])\n];\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {speedDialFabAnimations} from './mat-fab-menu.animations';\nimport { ThemePalette } from '@angular/material/core';\nimport { TooltipPosition } from '@angular/material/tooltip';\n\nexport interface MatFabMenu {\n  id: string | number;\n  icon?: string; // please use either icon or imgUrl\n  iconColor?: ThemePalette;\n  imgUrl?: string; // please use either icon or imgUrl\n  tooltip?: string;\n  tooltipPosition?: TooltipPosition;\n  color?: ThemePalette;\n}\n\nexport type MatFabMenuDirection = 'top' | 'bottom' | 'left' | 'right';\n\n@Component({\n  selector: 'mat-fab-menu',\n  templateUrl: 'mat-fab-menu.component.html',\n  styleUrls: ['mat-fab-menu.component.scss'],\n  animations: speedDialFabAnimations\n})\nexport class MatFabMenuComponent implements OnInit, OnChanges {\n\n  @Input()\n  fabButtons: MatFabMenu[];\n\n  @Input()\n  icon = 'add';\n\n  @Input()\n  direction: MatFabMenuDirection = 'top';\n\n  @Input()\n  color: ThemePalette = 'accent';\n\n  @Input()\n  isActive: boolean;\n\n  @Input()\n  disabled: boolean;\n\n  @Input()\n  closeAfterSelection = true;\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output()\n  onFabMenuItemSelected: EventEmitter<string | number> = new EventEmitter<string | number>();\n\n  layout: any;\n  layout2: any;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.adjustLayout();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.direction && !changes.direction.firstChange) {\n      this.direction = changes.direction.currentValue;\n      this.adjustLayout();\n    }\n\n    if (changes.color && !changes.color.firstChange) {\n      this.color = changes.color.currentValue;\n    }\n\n    if (changes.fabButtons && !changes.fabButtons.firstChange) {\n      this.fabButtons = changes.fabButtons.currentValue;\n    }\n  }\n\n  adjustLayout() {\n    switch (this.direction) {\n      case 'top':\n        this.layout = 'column-reverse';\n        this.layout2 = 'column-reverse';\n        break;\n\n      case 'bottom':\n        this.layout = 'column';\n        this.layout2 = 'column';\n        break;\n\n      case 'left':\n        this.layout = 'row-reverse';\n        this.layout2 = 'row-reverse';\n        break;\n\n      case 'right':\n        this.layout = 'row';\n        this.layout2 = 'row';\n        break;\n    }\n  }\n\n  toggle() {\n    this.isActive = !this.isActive;\n  }\n\n  selectFabMenu(fab: MatFabMenu) {\n    this.onFabMenuItemSelected.emit(fab.id);\n    if (this.closeAfterSelection) {\n      this.isActive = false;\n    }\n  }\n}\n","<div [fxLayout]=\"layout\" class=\"container\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n  <div fxLayoutAlign=\"center\">\n    <button (click)=\"isActive = !isActive\"\n            [color]=\"color\" [disabled]=\"disabled\"\n            type=\"button\"\n            [ngClass]=\"{\n    'mat-fab' : !isActive,\n    'mat-mini-fab' : isActive\n  }\"\n            mat-fab>\n      <mat-icon [@fabToggler]=\"{value: isActive}\">{{icon}}</mat-icon> <!-- Animation here -->\n    </button>\n  </div>\n  <div *ngIf=\"isActive\" [@fabsStagger]=\"fabButtons.length\"\n       [fxLayout]=\"layout2\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <button (click)=\"selectFabMenu(fab)\"\n            *ngFor=\"let fab of fabButtons\"\n            [color]=\"fab?.color\"\n            [matTooltip]=\"fab?.tooltip\"\n            [matTooltipPosition]=\"fab?.tooltipPosition\"\n            [ngClass]=\"{'fullSVG' : fab?.imgUrl}\"\n            type=\"button\"\n            mat-fab>\n      <mat-icon *ngIf=\"fab?.icon\" [color]=\"fab?.iconColor\">{{fab?.icon}}</mat-icon>\n      <img *ngIf=\"fab?.imgUrl\" [src]=\"fab?.imgUrl\" alt=\"icon\">\n    </button>\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {MatFabMenuComponent} from './mat-fab-menu.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {CommonModule} from '@angular/common';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {FlexLayoutModule} from '@angular/flex-layout';\n\n@NgModule({\n  declarations: [MatFabMenuComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTooltipModule,\n    FlexLayoutModule\n  ],\n  exports: [MatFabMenuComponent]\n})\nexport class MatFabMenuModule {\n}\n","/*\n * Public API Surface of fab-menu\n */\n\nexport * from './lib/mat-fab-menu.component';\nexport * from './lib/mat-fab-menu.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}